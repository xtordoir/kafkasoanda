package io.kensu.hff

import play.api.libs.json._
import play.api.libs.functional.syntax._
import java.text.SimpleDateFormat
import java.util.Date

case class Liquidity(price: Double, liquidity: Long)

case class PriceMsg(time: Date,
                    bid: Double,
                    ask: Double
                    )

/**
case class PriceMsg(`type` :String, //:"PRICE",
                    time: String, //"2018-02-02T13:59:22.183163760Z",
                    bids: List[Liquidity], //{"price":"1.24452","liquidity":10000000}],
                    asks: List[Liquidity], //{"price":"1.24467","liquidity":10000000}],
                    closeoutBid: String, //"1.24437",
                    closeoutAsk: String, //1.24482",
                    status: String, //"tradeable",
                    tradeable: Boolean, //true,
                    instrument: String //"EUR_USD"}
                    )
*/


case class Tick(bid: Double, ask: Double) {
  def price() = (bid + ask) / 2 
}

case class Overshoot(instrument: String, 
                     scale: Double, 
                     direction: Int, 
                     prevExt: Double, 
                     ext: Double, 
                     maxOS: Double, 
                     extDist: Double) {

	def update(price: Tick): Overshoot = {
    
		val os = 100*(price.price - prevExt)/prevExt/scale
		val eDist = 100*(price.price - ext)/ext/scale
    if (prevExt < 0) {
      Overshoot(instrument, scale, direction, price.price*(1.0-scale/100), price.price, 1.0, 0.0)
    }
		// if reversal...
		else if (os*eDist < 0 && math.abs(eDist) > 1.0) {
			Overshoot(instrument, scale, -direction, ext, price.price, 1.0, 0.0)
		} else {
			//println(math.abs(os) + " vs " + maxOS)
			//println(math.abs(eDist) + " vs " + extDist)

			val (newExt, newMaxOS) = if (math.abs(os) > maxOS) { (price.price, math.abs(os)) } else { (ext, maxOS)}
			val newExtDist = math.abs(100*(price.price - newExt)/ext/scale)
			//println(prevExt + " " + newExt+ " " + newMaxOS+ " " + newExtDist)
			Overshoot(instrument, scale, direction, prevExt, newExt, newMaxOS, newExtDist)
		}
	}
}

object Overshoot {
	def apply(instrument: String, scale: Double): Overshoot = Overshoot(instrument, scale,
		1, -1.0, -1.0, 0.0, 0.0)

//	def apply(scale: Double, price: Price): Overshoot = Overshoot(price.instrument, scale,
//		1, price.price, price.price, 0.0, 0.0)
}